
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00001280 memsz 0x00001280 flags r-x
    LOAD off    0x000022a0 vaddr 0x000092a0 paddr 0x00009574 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00002848 vaddr 0x00009848 paddr 0x00009848 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-
    LOAD off    0x00003000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00014000  00014000  00003000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000123c  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0000925c  0000925c  0000225c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  000092a0  00009574  000022a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  00009848  00009848  00002848  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003d0  00000000  00000000  00003048  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000053de  00000000  00000000  00003418  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019f6  00000000  00000000  000087f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001e5d  00000000  00000000  0000a1ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005b8  00000000  00000000  0000c04c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000f23  00000000  00000000  0000c604  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000094b  00000000  00000000  0000d527  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000030  00000000  00000000  0000de74  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000050  00000000  00000000  0000dea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  0000f32f  2**0
                  CONTENTS, READONLY
 16 .cpu          0000000a  00000000  00000000  0000f332  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  0000f33c  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0000f33d  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  0000f33e  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  0000f342  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  0000f346  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0000f34a  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0000f353  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0000f35c  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  0000f365  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000026  00000000  00000000  0000f370  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00033e4d  00000000  00000000  0000f396  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00014000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
0000925c l    d  .rodata	00000000 .rodata
000092a0 l    d  .rwdata	00000000 .rwdata
00009848 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_bsp//obj/HAL/src/crt0.o
00008068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000092a0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
000082a8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000083fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00008538 l     F .text	00000038 alt_dev_reg
00009380 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00008824 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00008980 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000089ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00008b08 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00008c40 l     F .text	00000050 alt_get_errno
00008c90 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 
00008394 g     F .text	00000068 alt_main
000080a0 g     F .text	00000080 _puts_r
00009574 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00014000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00009848 g     O .bss	00000004 errno
00009850 g     O .bss	00000004 alt_argv
00011554 g       *ABS*	00000000 _gp
000093d4 g     O .rwdata	00000180 alt_fd_list
00008f30 g     F .text	00000090 alt_find_dev
00008bc8 g     F .text	00000078 alt_io_redirect
00008120 g     F .text	00000014 puts
00008698 g     F .text	000000f4 altera_avalon_jtag_uart_read
00009188 g     F .text	0000008c alt_icache_flush
0000956c g     O .rwdata	00000004 alt_max_fd
00009554 g     O .rwdata	00000004 _global_impure_ptr
00009858 g       *ABS*	00000000 __bss_end
000093ac g     O .rwdata	00000028 alt_dev_null
0000893c g     F .text	00000044 alt_dcache_flush_all
00009574 g       *ABS*	00000000 __ram_rwdata_end
00009564 g     O .rwdata	00000008 alt_dev_list
0000844c g     F .text	000000ec write
000092a0 g       *ABS*	00000000 __ram_rodata_end
00009858 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
0000878c g     F .text	00000098 altera_avalon_jtag_uart_write
00008020 g     F .text	0000004c _start
000085a4 g     F .text	00000034 alt_sys_init
000092a0 g       *ABS*	00000000 __ram_rwdata_start
0000925c g       *ABS*	00000000 __ram_rodata_start
000085d8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000090d4 g     F .text	000000b4 alt_get_fd
00009214 g     F .text	00000048 memcmp
00009858 g       *ABS*	00000000 __alt_stack_base
00008fc0 g     F .text	00000114 alt_find_file
000089fc g     F .text	000000a0 alt_dev_llist_insert
0000815c g     F .text	000000e0 __sfvwrite_small_dev
00009848 g       *ABS*	00000000 __bss_start
0000806c g     F .text	00000034 main
00009854 g     O .bss	00000004 alt_envp
00008638 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009570 g     O .rwdata	00000004 alt_errno
0000925c g       *ABS*	00000000 __flash_rodata_start
00014000 g       *ABS*	00000000 __alt_mem_onchip_rom
00008570 g     F .text	00000034 alt_irq_init
00008eb0 g     F .text	00000060 alt_release_fd
0000823c g     F .text	0000006c _write_r
00009558 g     O .rwdata	00000004 _impure_ptr
0000984c g     O .bss	00000004 alt_argc
0000955c g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009574 g       *ABS*	00000000 _edata
00009858 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00008f10 g     F .text	00000020 altera_nios2_qsys_irq_init
0000d000 g       *ABS*	00000000 __alt_data_end
00008000 g       *ABS*	00000000 __alt_mem_onchip_ram
00008a9c g     F .text	0000003c _exit
00008134 g     F .text	00000028 strlen
00008d5c g     F .text	00000154 open
00008ad8 g     F .text	00000030 alt_icache_flush_all
00008874 g     F .text	000000c8 close
00008314 g     F .text	00000080 alt_load



Disassembly of section .entry:

00014000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   14000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   14004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   14008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1400c:	00bffd16 	blt	zero,r2,14004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   14010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   14014:	08600814 	ori	at,at,32800
    jmp r1
   14018:	0800683a 	jmp	at
   1401c:	00000000 	call	0 <__alt_mem_onchip_ram-0x8000>

Disassembly of section .text:

00008020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    8024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    8028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    802c:	00bffd16 	blt	zero,r2,8024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8030:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8034:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8038:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    803c:	d6855514 	ori	gp,gp,5460
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8040:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8044:	10a61214 	ori	r2,r2,38984

    movhi r3, %hi(__bss_end)
    8048:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    804c:	18e61614 	ori	r3,r3,39000

    beq r2, r3, 1f
    8050:	10c00326 	beq	r2,r3,8060 <_start+0x40>

0:
    stw zero, (r2)
    8054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    805c:	10fffd36 	bltu	r2,r3,8054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8060:	00083140 	call	8314 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8064:	00083940 	call	8394 <alt_main>

00008068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8068:	003fff06 	br	8068 <alt_after_alt_main>

0000806c <main>:
 */

#include <stdio.h>

int main()
{
    806c:	defffe04 	addi	sp,sp,-8
    8070:	dfc00115 	stw	ra,4(sp)
    8074:	df000015 	stw	fp,0(sp)
    8078:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
    807c:	01000074 	movhi	r4,1
    8080:	21249704 	addi	r4,r4,-28068
    8084:	00081200 	call	8120 <puts>

  return 0;
    8088:	0005883a 	mov	r2,zero
}
    808c:	e037883a 	mov	sp,fp
    8090:	dfc00117 	ldw	ra,4(sp)
    8094:	df000017 	ldw	fp,0(sp)
    8098:	dec00204 	addi	sp,sp,8
    809c:	f800283a 	ret

000080a0 <_puts_r>:
    80a0:	defffd04 	addi	sp,sp,-12
    80a4:	dc000015 	stw	r16,0(sp)
    80a8:	2021883a 	mov	r16,r4
    80ac:	2809883a 	mov	r4,r5
    80b0:	dfc00215 	stw	ra,8(sp)
    80b4:	dc400115 	stw	r17,4(sp)
    80b8:	2823883a 	mov	r17,r5
    80bc:	00081340 	call	8134 <strlen>
    80c0:	81400217 	ldw	r5,8(r16)
    80c4:	00c00074 	movhi	r3,1
    80c8:	18e05704 	addi	r3,r3,-32420
    80cc:	880d883a 	mov	r6,r17
    80d0:	8009883a 	mov	r4,r16
    80d4:	28c00115 	stw	r3,4(r5)
    80d8:	100f883a 	mov	r7,r2
    80dc:	183ee83a 	callr	r3
    80e0:	047fffc4 	movi	r17,-1
    80e4:	14400926 	beq	r2,r17,810c <_puts_r+0x6c>
    80e8:	81400217 	ldw	r5,8(r16)
    80ec:	8009883a 	mov	r4,r16
    80f0:	01800074 	movhi	r6,1
    80f4:	31a49c04 	addi	r6,r6,-28048
    80f8:	28800117 	ldw	r2,4(r5)
    80fc:	01c00044 	movi	r7,1
    8100:	103ee83a 	callr	r2
    8104:	14400126 	beq	r2,r17,810c <_puts_r+0x6c>
    8108:	0005883a 	mov	r2,zero
    810c:	dfc00217 	ldw	ra,8(sp)
    8110:	dc400117 	ldw	r17,4(sp)
    8114:	dc000017 	ldw	r16,0(sp)
    8118:	dec00304 	addi	sp,sp,12
    811c:	f800283a 	ret

00008120 <puts>:
    8120:	00800074 	movhi	r2,1
    8124:	10a55604 	addi	r2,r2,-27304
    8128:	200b883a 	mov	r5,r4
    812c:	11000017 	ldw	r4,0(r2)
    8130:	00080a01 	jmpi	80a0 <_puts_r>

00008134 <strlen>:
    8134:	20800007 	ldb	r2,0(r4)
    8138:	10000626 	beq	r2,zero,8154 <strlen+0x20>
    813c:	2005883a 	mov	r2,r4
    8140:	10800044 	addi	r2,r2,1
    8144:	10c00007 	ldb	r3,0(r2)
    8148:	183ffd1e 	bne	r3,zero,8140 <strlen+0xc>
    814c:	1105c83a 	sub	r2,r2,r4
    8150:	f800283a 	ret
    8154:	0005883a 	mov	r2,zero
    8158:	f800283a 	ret

0000815c <__sfvwrite_small_dev>:
    815c:	2880000b 	ldhu	r2,0(r5)
    8160:	defffa04 	addi	sp,sp,-24
    8164:	dcc00315 	stw	r19,12(sp)
    8168:	10c0020c 	andi	r3,r2,8
    816c:	18ffffcc 	andi	r3,r3,65535
    8170:	18e0001c 	xori	r3,r3,32768
    8174:	dc800215 	stw	r18,8(sp)
    8178:	dc400115 	stw	r17,4(sp)
    817c:	dfc00515 	stw	ra,20(sp)
    8180:	dd000415 	stw	r20,16(sp)
    8184:	dc000015 	stw	r16,0(sp)
    8188:	18e00004 	addi	r3,r3,-32768
    818c:	2825883a 	mov	r18,r5
    8190:	2027883a 	mov	r19,r4
    8194:	3023883a 	mov	r17,r6
    8198:	18002626 	beq	r3,zero,8234 <__sfvwrite_small_dev+0xd8>
    819c:	2940008f 	ldh	r5,2(r5)
    81a0:	28001016 	blt	r5,zero,81e4 <__sfvwrite_small_dev+0x88>
    81a4:	01c01a0e 	bge	zero,r7,8210 <__sfvwrite_small_dev+0xb4>
    81a8:	3821883a 	mov	r16,r7
    81ac:	05010004 	movi	r20,1024
    81b0:	00000306 	br	81c0 <__sfvwrite_small_dev+0x64>
    81b4:	88a3883a 	add	r17,r17,r2
    81b8:	0400150e 	bge	zero,r16,8210 <__sfvwrite_small_dev+0xb4>
    81bc:	9140008f 	ldh	r5,2(r18)
    81c0:	880d883a 	mov	r6,r17
    81c4:	9809883a 	mov	r4,r19
    81c8:	800f883a 	mov	r7,r16
    81cc:	a400010e 	bge	r20,r16,81d4 <__sfvwrite_small_dev+0x78>
    81d0:	01c10004 	movi	r7,1024
    81d4:	000823c0 	call	823c <_write_r>
    81d8:	80a1c83a 	sub	r16,r16,r2
    81dc:	00bff516 	blt	zero,r2,81b4 <__sfvwrite_small_dev+0x58>
    81e0:	9080000b 	ldhu	r2,0(r18)
    81e4:	10801014 	ori	r2,r2,64
    81e8:	9080000d 	sth	r2,0(r18)
    81ec:	00bfffc4 	movi	r2,-1
    81f0:	dfc00517 	ldw	ra,20(sp)
    81f4:	dd000417 	ldw	r20,16(sp)
    81f8:	dcc00317 	ldw	r19,12(sp)
    81fc:	dc800217 	ldw	r18,8(sp)
    8200:	dc400117 	ldw	r17,4(sp)
    8204:	dc000017 	ldw	r16,0(sp)
    8208:	dec00604 	addi	sp,sp,24
    820c:	f800283a 	ret
    8210:	0005883a 	mov	r2,zero
    8214:	dfc00517 	ldw	ra,20(sp)
    8218:	dd000417 	ldw	r20,16(sp)
    821c:	dcc00317 	ldw	r19,12(sp)
    8220:	dc800217 	ldw	r18,8(sp)
    8224:	dc400117 	ldw	r17,4(sp)
    8228:	dc000017 	ldw	r16,0(sp)
    822c:	dec00604 	addi	sp,sp,24
    8230:	f800283a 	ret
    8234:	00bfffc4 	movi	r2,-1
    8238:	003fed06 	br	81f0 <__sfvwrite_small_dev+0x94>

0000823c <_write_r>:
    823c:	defffd04 	addi	sp,sp,-12
    8240:	dc400115 	stw	r17,4(sp)
    8244:	dc000015 	stw	r16,0(sp)
    8248:	2023883a 	mov	r17,r4
    824c:	04000074 	movhi	r16,1
    8250:	84261204 	addi	r16,r16,-26552
    8254:	2809883a 	mov	r4,r5
    8258:	300b883a 	mov	r5,r6
    825c:	380d883a 	mov	r6,r7
    8260:	dfc00215 	stw	ra,8(sp)
    8264:	80000015 	stw	zero,0(r16)
    8268:	000844c0 	call	844c <write>
    826c:	00ffffc4 	movi	r3,-1
    8270:	10c00526 	beq	r2,r3,8288 <_write_r+0x4c>
    8274:	dfc00217 	ldw	ra,8(sp)
    8278:	dc400117 	ldw	r17,4(sp)
    827c:	dc000017 	ldw	r16,0(sp)
    8280:	dec00304 	addi	sp,sp,12
    8284:	f800283a 	ret
    8288:	80c00017 	ldw	r3,0(r16)
    828c:	183ff926 	beq	r3,zero,8274 <_write_r+0x38>
    8290:	88c00015 	stw	r3,0(r17)
    8294:	dfc00217 	ldw	ra,8(sp)
    8298:	dc400117 	ldw	r17,4(sp)
    829c:	dc000017 	ldw	r16,0(sp)
    82a0:	dec00304 	addi	sp,sp,12
    82a4:	f800283a 	ret

000082a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    82a8:	defffc04 	addi	sp,sp,-16
    82ac:	df000315 	stw	fp,12(sp)
    82b0:	df000304 	addi	fp,sp,12
    82b4:	e13ffd15 	stw	r4,-12(fp)
    82b8:	e17ffe15 	stw	r5,-8(fp)
    82bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    82c0:	e0fffe17 	ldw	r3,-8(fp)
    82c4:	e0bffd17 	ldw	r2,-12(fp)
    82c8:	18800e26 	beq	r3,r2,8304 <alt_load_section+0x5c>
  {
    while( to != end )
    82cc:	00000a06 	br	82f8 <alt_load_section+0x50>
    {
      *to++ = *from++;
    82d0:	e0bffd17 	ldw	r2,-12(fp)
    82d4:	10c00017 	ldw	r3,0(r2)
    82d8:	e0bffe17 	ldw	r2,-8(fp)
    82dc:	10c00015 	stw	r3,0(r2)
    82e0:	e0bffe17 	ldw	r2,-8(fp)
    82e4:	10800104 	addi	r2,r2,4
    82e8:	e0bffe15 	stw	r2,-8(fp)
    82ec:	e0bffd17 	ldw	r2,-12(fp)
    82f0:	10800104 	addi	r2,r2,4
    82f4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    82f8:	e0fffe17 	ldw	r3,-8(fp)
    82fc:	e0bfff17 	ldw	r2,-4(fp)
    8300:	18bff31e 	bne	r3,r2,82d0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    8304:	e037883a 	mov	sp,fp
    8308:	df000017 	ldw	fp,0(sp)
    830c:	dec00104 	addi	sp,sp,4
    8310:	f800283a 	ret

00008314 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8314:	defffe04 	addi	sp,sp,-8
    8318:	dfc00115 	stw	ra,4(sp)
    831c:	df000015 	stw	fp,0(sp)
    8320:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8324:	01000074 	movhi	r4,1
    8328:	21255d04 	addi	r4,r4,-27276
    832c:	01400074 	movhi	r5,1
    8330:	2964a804 	addi	r5,r5,-28000
    8334:	01800074 	movhi	r6,1
    8338:	31a55d04 	addi	r6,r6,-27276
    833c:	00082a80 	call	82a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8340:	01000074 	movhi	r4,1
    8344:	21200804 	addi	r4,r4,-32736
    8348:	01400074 	movhi	r5,1
    834c:	29600804 	addi	r5,r5,-32736
    8350:	01800074 	movhi	r6,1
    8354:	31a00804 	addi	r6,r6,-32736
    8358:	00082a80 	call	82a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    835c:	01000074 	movhi	r4,1
    8360:	21249704 	addi	r4,r4,-28068
    8364:	01400074 	movhi	r5,1
    8368:	29649704 	addi	r5,r5,-28068
    836c:	01800074 	movhi	r6,1
    8370:	31a4a804 	addi	r6,r6,-28000
    8374:	00082a80 	call	82a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8378:	000893c0 	call	893c <alt_dcache_flush_all>
  alt_icache_flush_all();
    837c:	0008ad80 	call	8ad8 <alt_icache_flush_all>
}
    8380:	e037883a 	mov	sp,fp
    8384:	dfc00117 	ldw	ra,4(sp)
    8388:	df000017 	ldw	fp,0(sp)
    838c:	dec00204 	addi	sp,sp,8
    8390:	f800283a 	ret

00008394 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8394:	defffd04 	addi	sp,sp,-12
    8398:	dfc00215 	stw	ra,8(sp)
    839c:	df000115 	stw	fp,4(sp)
    83a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    83a4:	0009883a 	mov	r4,zero
    83a8:	00085700 	call	8570 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    83ac:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    83b0:	00085a40 	call	85a4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    83b4:	01000074 	movhi	r4,1
    83b8:	21249d04 	addi	r4,r4,-28044
    83bc:	01400074 	movhi	r5,1
    83c0:	29649d04 	addi	r5,r5,-28044
    83c4:	01800074 	movhi	r6,1
    83c8:	31a49d04 	addi	r6,r6,-28044
    83cc:	0008bc80 	call	8bc8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    83d0:	d120be17 	ldw	r4,-32008(gp)
    83d4:	d0e0bf17 	ldw	r3,-32004(gp)
    83d8:	d0a0c017 	ldw	r2,-32000(gp)
    83dc:	180b883a 	mov	r5,r3
    83e0:	100d883a 	mov	r6,r2
    83e4:	000806c0 	call	806c <main>
    83e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    83ec:	01000044 	movi	r4,1
    83f0:	00088740 	call	8874 <close>
  exit (result);
    83f4:	e13fff17 	ldw	r4,-4(fp)
    83f8:	0008a9c0 	call	8a9c <_exit>

000083fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    83fc:	defffe04 	addi	sp,sp,-8
    8400:	dfc00115 	stw	ra,4(sp)
    8404:	df000015 	stw	fp,0(sp)
    8408:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    840c:	00800074 	movhi	r2,1
    8410:	10a55c04 	addi	r2,r2,-27280
    8414:	10800017 	ldw	r2,0(r2)
    8418:	10000526 	beq	r2,zero,8430 <alt_get_errno+0x34>
    841c:	00800074 	movhi	r2,1
    8420:	10a55c04 	addi	r2,r2,-27280
    8424:	10800017 	ldw	r2,0(r2)
    8428:	103ee83a 	callr	r2
    842c:	00000206 	br	8438 <alt_get_errno+0x3c>
    8430:	00800074 	movhi	r2,1
    8434:	10a61204 	addi	r2,r2,-26552
}
    8438:	e037883a 	mov	sp,fp
    843c:	dfc00117 	ldw	ra,4(sp)
    8440:	df000017 	ldw	fp,0(sp)
    8444:	dec00204 	addi	sp,sp,8
    8448:	f800283a 	ret

0000844c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    844c:	defff904 	addi	sp,sp,-28
    8450:	dfc00615 	stw	ra,24(sp)
    8454:	df000515 	stw	fp,20(sp)
    8458:	df000504 	addi	fp,sp,20
    845c:	e13ffd15 	stw	r4,-12(fp)
    8460:	e17ffe15 	stw	r5,-8(fp)
    8464:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    8468:	e0bffd17 	ldw	r2,-12(fp)
    846c:	10000616 	blt	r2,zero,8488 <write+0x3c>
    8470:	e0bffd17 	ldw	r2,-12(fp)
    8474:	10c00324 	muli	r3,r2,12
    8478:	00800074 	movhi	r2,1
    847c:	10a4f504 	addi	r2,r2,-27692
    8480:	1885883a 	add	r2,r3,r2
    8484:	00000106 	br	848c <write+0x40>
    8488:	0005883a 	mov	r2,zero
    848c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    8490:	e0bffb17 	ldw	r2,-20(fp)
    8494:	10001f26 	beq	r2,zero,8514 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    8498:	e0bffb17 	ldw	r2,-20(fp)
    849c:	10800217 	ldw	r2,8(r2)
    84a0:	108000cc 	andi	r2,r2,3
    84a4:	10001726 	beq	r2,zero,8504 <write+0xb8>
    84a8:	e0bffb17 	ldw	r2,-20(fp)
    84ac:	10800017 	ldw	r2,0(r2)
    84b0:	10800617 	ldw	r2,24(r2)
    84b4:	10001326 	beq	r2,zero,8504 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    84b8:	e0bffb17 	ldw	r2,-20(fp)
    84bc:	10800017 	ldw	r2,0(r2)
    84c0:	10c00617 	ldw	r3,24(r2)
    84c4:	e0bfff17 	ldw	r2,-4(fp)
    84c8:	e13ffb17 	ldw	r4,-20(fp)
    84cc:	e17ffe17 	ldw	r5,-8(fp)
    84d0:	100d883a 	mov	r6,r2
    84d4:	183ee83a 	callr	r3
    84d8:	e0bffc15 	stw	r2,-16(fp)
    84dc:	e0bffc17 	ldw	r2,-16(fp)
    84e0:	1000060e 	bge	r2,zero,84fc <write+0xb0>
      {
        ALT_ERRNO = -rval;
    84e4:	00083fc0 	call	83fc <alt_get_errno>
    84e8:	e0fffc17 	ldw	r3,-16(fp)
    84ec:	00c7c83a 	sub	r3,zero,r3
    84f0:	10c00015 	stw	r3,0(r2)
        return -1;
    84f4:	00bfffc4 	movi	r2,-1
    84f8:	00000a06 	br	8524 <write+0xd8>
      }
      return rval;
    84fc:	e0bffc17 	ldw	r2,-16(fp)
    8500:	00000806 	br	8524 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
    8504:	00083fc0 	call	83fc <alt_get_errno>
    8508:	00c00344 	movi	r3,13
    850c:	10c00015 	stw	r3,0(r2)
    8510:	00000306 	br	8520 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    8514:	00083fc0 	call	83fc <alt_get_errno>
    8518:	00c01444 	movi	r3,81
    851c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    8520:	00bfffc4 	movi	r2,-1
}
    8524:	e037883a 	mov	sp,fp
    8528:	dfc00117 	ldw	ra,4(sp)
    852c:	df000017 	ldw	fp,0(sp)
    8530:	dec00204 	addi	sp,sp,8
    8534:	f800283a 	ret

00008538 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    8538:	defffd04 	addi	sp,sp,-12
    853c:	dfc00215 	stw	ra,8(sp)
    8540:	df000115 	stw	fp,4(sp)
    8544:	df000104 	addi	fp,sp,4
    8548:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    854c:	e13fff17 	ldw	r4,-4(fp)
    8550:	01400074 	movhi	r5,1
    8554:	29655904 	addi	r5,r5,-27292
    8558:	00089fc0 	call	89fc <alt_dev_llist_insert>
}
    855c:	e037883a 	mov	sp,fp
    8560:	dfc00117 	ldw	ra,4(sp)
    8564:	df000017 	ldw	fp,0(sp)
    8568:	dec00204 	addi	sp,sp,8
    856c:	f800283a 	ret

00008570 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8570:	defffd04 	addi	sp,sp,-12
    8574:	dfc00215 	stw	ra,8(sp)
    8578:	df000115 	stw	fp,4(sp)
    857c:	df000104 	addi	fp,sp,4
    8580:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
    8584:	0008f100 	call	8f10 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8588:	00800044 	movi	r2,1
    858c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8590:	e037883a 	mov	sp,fp
    8594:	dfc00117 	ldw	ra,4(sp)
    8598:	df000017 	ldw	fp,0(sp)
    859c:	dec00204 	addi	sp,sp,8
    85a0:	f800283a 	ret

000085a4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    85a4:	defffe04 	addi	sp,sp,-8
    85a8:	dfc00115 	stw	ra,4(sp)
    85ac:	df000015 	stw	fp,0(sp)
    85b0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    85b4:	01000074 	movhi	r4,1
    85b8:	2124e004 	addi	r4,r4,-27776
    85bc:	00085380 	call	8538 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
    85c0:	0001883a 	nop
}
    85c4:	e037883a 	mov	sp,fp
    85c8:	dfc00117 	ldw	ra,4(sp)
    85cc:	df000017 	ldw	fp,0(sp)
    85d0:	dec00204 	addi	sp,sp,8
    85d4:	f800283a 	ret

000085d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    85d8:	defffa04 	addi	sp,sp,-24
    85dc:	dfc00515 	stw	ra,20(sp)
    85e0:	df000415 	stw	fp,16(sp)
    85e4:	df000404 	addi	fp,sp,16
    85e8:	e13ffd15 	stw	r4,-12(fp)
    85ec:	e17ffe15 	stw	r5,-8(fp)
    85f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    85f4:	e0bffd17 	ldw	r2,-12(fp)
    85f8:	10800017 	ldw	r2,0(r2)
    85fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8600:	e0bffc17 	ldw	r2,-16(fp)
    8604:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    8608:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    860c:	10800217 	ldw	r2,8(r2)
    8610:	1809883a 	mov	r4,r3
    8614:	e17ffe17 	ldw	r5,-8(fp)
    8618:	e1bfff17 	ldw	r6,-4(fp)
    861c:	100f883a 	mov	r7,r2
    8620:	00086980 	call	8698 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    8624:	e037883a 	mov	sp,fp
    8628:	dfc00117 	ldw	ra,4(sp)
    862c:	df000017 	ldw	fp,0(sp)
    8630:	dec00204 	addi	sp,sp,8
    8634:	f800283a 	ret

00008638 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    8638:	defffa04 	addi	sp,sp,-24
    863c:	dfc00515 	stw	ra,20(sp)
    8640:	df000415 	stw	fp,16(sp)
    8644:	df000404 	addi	fp,sp,16
    8648:	e13ffd15 	stw	r4,-12(fp)
    864c:	e17ffe15 	stw	r5,-8(fp)
    8650:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8654:	e0bffd17 	ldw	r2,-12(fp)
    8658:	10800017 	ldw	r2,0(r2)
    865c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8660:	e0bffc17 	ldw	r2,-16(fp)
    8664:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    8668:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    866c:	10800217 	ldw	r2,8(r2)
    8670:	1809883a 	mov	r4,r3
    8674:	e17ffe17 	ldw	r5,-8(fp)
    8678:	e1bfff17 	ldw	r6,-4(fp)
    867c:	100f883a 	mov	r7,r2
    8680:	000878c0 	call	878c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    8684:	e037883a 	mov	sp,fp
    8688:	dfc00117 	ldw	ra,4(sp)
    868c:	df000017 	ldw	fp,0(sp)
    8690:	dec00204 	addi	sp,sp,8
    8694:	f800283a 	ret

00008698 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    8698:	defff704 	addi	sp,sp,-36
    869c:	df000815 	stw	fp,32(sp)
    86a0:	df000804 	addi	fp,sp,32
    86a4:	e13ffc15 	stw	r4,-16(fp)
    86a8:	e17ffd15 	stw	r5,-12(fp)
    86ac:	e1bffe15 	stw	r6,-8(fp)
    86b0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    86b4:	e0bffc17 	ldw	r2,-16(fp)
    86b8:	10800017 	ldw	r2,0(r2)
    86bc:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    86c0:	e0bffd17 	ldw	r2,-12(fp)
    86c4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    86c8:	e0bffe17 	ldw	r2,-8(fp)
    86cc:	e0fffd17 	ldw	r3,-12(fp)
    86d0:	1885883a 	add	r2,r3,r2
    86d4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    86d8:	00001406 	br	872c <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    86dc:	e0bff917 	ldw	r2,-28(fp)
    86e0:	10800037 	ldwio	r2,0(r2)
    86e4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    86e8:	e0bffb17 	ldw	r2,-20(fp)
    86ec:	10a0000c 	andi	r2,r2,32768
    86f0:	10000826 	beq	r2,zero,8714 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    86f4:	e0bffb17 	ldw	r2,-20(fp)
    86f8:	1007883a 	mov	r3,r2
    86fc:	e0bff817 	ldw	r2,-32(fp)
    8700:	10c00005 	stb	r3,0(r2)
    8704:	e0bff817 	ldw	r2,-32(fp)
    8708:	10800044 	addi	r2,r2,1
    870c:	e0bff815 	stw	r2,-32(fp)
    8710:	00000606 	br	872c <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    8714:	e0fff817 	ldw	r3,-32(fp)
    8718:	e0bffd17 	ldw	r2,-12(fp)
    871c:	1880071e 	bne	r3,r2,873c <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    8720:	e0bfff17 	ldw	r2,-4(fp)
    8724:	1090000c 	andi	r2,r2,16384
    8728:	1000061e 	bne	r2,zero,8744 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    872c:	e0fff817 	ldw	r3,-32(fp)
    8730:	e0bffa17 	ldw	r2,-24(fp)
    8734:	18bfe936 	bltu	r3,r2,86dc <altera_avalon_jtag_uart_read+0x44>
    8738:	00000306 	br	8748 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    873c:	0001883a 	nop
    8740:	00000106 	br	8748 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    8744:	0001883a 	nop
    
  }

  if (ptr != buffer)
    8748:	e0fff817 	ldw	r3,-32(fp)
    874c:	e0bffd17 	ldw	r2,-12(fp)
    8750:	18800426 	beq	r3,r2,8764 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    8754:	e0fff817 	ldw	r3,-32(fp)
    8758:	e0bffd17 	ldw	r2,-12(fp)
    875c:	1885c83a 	sub	r2,r3,r2
    8760:	00000606 	br	877c <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    8764:	e0bfff17 	ldw	r2,-4(fp)
    8768:	1090000c 	andi	r2,r2,16384
    876c:	10000226 	beq	r2,zero,8778 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    8770:	00bffd44 	movi	r2,-11
    8774:	00000106 	br	877c <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    8778:	00bffec4 	movi	r2,-5
}
    877c:	e037883a 	mov	sp,fp
    8780:	df000017 	ldw	fp,0(sp)
    8784:	dec00104 	addi	sp,sp,4
    8788:	f800283a 	ret

0000878c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    878c:	defff904 	addi	sp,sp,-28
    8790:	df000615 	stw	fp,24(sp)
    8794:	df000604 	addi	fp,sp,24
    8798:	e13ffc15 	stw	r4,-16(fp)
    879c:	e17ffd15 	stw	r5,-12(fp)
    87a0:	e1bffe15 	stw	r6,-8(fp)
    87a4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    87a8:	e0bffc17 	ldw	r2,-16(fp)
    87ac:	10800017 	ldw	r2,0(r2)
    87b0:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    87b4:	e0bffe17 	ldw	r2,-8(fp)
    87b8:	e0fffd17 	ldw	r3,-12(fp)
    87bc:	1885883a 	add	r2,r3,r2
    87c0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    87c4:	00000f06 	br	8804 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    87c8:	e0bffa17 	ldw	r2,-24(fp)
    87cc:	10800104 	addi	r2,r2,4
    87d0:	10800037 	ldwio	r2,0(r2)
    87d4:	10bfffec 	andhi	r2,r2,65535
    87d8:	10000a26 	beq	r2,zero,8804 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    87dc:	e0bffa17 	ldw	r2,-24(fp)
    87e0:	e0fffd17 	ldw	r3,-12(fp)
    87e4:	18c00003 	ldbu	r3,0(r3)
    87e8:	18c03fcc 	andi	r3,r3,255
    87ec:	18c0201c 	xori	r3,r3,128
    87f0:	18ffe004 	addi	r3,r3,-128
    87f4:	e13ffd17 	ldw	r4,-12(fp)
    87f8:	21000044 	addi	r4,r4,1
    87fc:	e13ffd15 	stw	r4,-12(fp)
    8800:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8804:	e0fffd17 	ldw	r3,-12(fp)
    8808:	e0bffb17 	ldw	r2,-20(fp)
    880c:	18bfee36 	bltu	r3,r2,87c8 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    8810:	e0bffe17 	ldw	r2,-8(fp)
}
    8814:	e037883a 	mov	sp,fp
    8818:	df000017 	ldw	fp,0(sp)
    881c:	dec00104 	addi	sp,sp,4
    8820:	f800283a 	ret

00008824 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8824:	defffe04 	addi	sp,sp,-8
    8828:	dfc00115 	stw	ra,4(sp)
    882c:	df000015 	stw	fp,0(sp)
    8830:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8834:	00800074 	movhi	r2,1
    8838:	10a55c04 	addi	r2,r2,-27280
    883c:	10800017 	ldw	r2,0(r2)
    8840:	10000526 	beq	r2,zero,8858 <alt_get_errno+0x34>
    8844:	00800074 	movhi	r2,1
    8848:	10a55c04 	addi	r2,r2,-27280
    884c:	10800017 	ldw	r2,0(r2)
    8850:	103ee83a 	callr	r2
    8854:	00000206 	br	8860 <alt_get_errno+0x3c>
    8858:	00800074 	movhi	r2,1
    885c:	10a61204 	addi	r2,r2,-26552
}
    8860:	e037883a 	mov	sp,fp
    8864:	dfc00117 	ldw	ra,4(sp)
    8868:	df000017 	ldw	fp,0(sp)
    886c:	dec00204 	addi	sp,sp,8
    8870:	f800283a 	ret

00008874 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    8874:	defffb04 	addi	sp,sp,-20
    8878:	dfc00415 	stw	ra,16(sp)
    887c:	df000315 	stw	fp,12(sp)
    8880:	df000304 	addi	fp,sp,12
    8884:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    8888:	e0bfff17 	ldw	r2,-4(fp)
    888c:	10000616 	blt	r2,zero,88a8 <close+0x34>
    8890:	e0bfff17 	ldw	r2,-4(fp)
    8894:	10c00324 	muli	r3,r2,12
    8898:	00800074 	movhi	r2,1
    889c:	10a4f504 	addi	r2,r2,-27692
    88a0:	1885883a 	add	r2,r3,r2
    88a4:	00000106 	br	88ac <close+0x38>
    88a8:	0005883a 	mov	r2,zero
    88ac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    88b0:	e0bffd17 	ldw	r2,-12(fp)
    88b4:	10001826 	beq	r2,zero,8918 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    88b8:	e0bffd17 	ldw	r2,-12(fp)
    88bc:	10800017 	ldw	r2,0(r2)
    88c0:	10800417 	ldw	r2,16(r2)
    88c4:	10000626 	beq	r2,zero,88e0 <close+0x6c>
    88c8:	e0bffd17 	ldw	r2,-12(fp)
    88cc:	10800017 	ldw	r2,0(r2)
    88d0:	10800417 	ldw	r2,16(r2)
    88d4:	e13ffd17 	ldw	r4,-12(fp)
    88d8:	103ee83a 	callr	r2
    88dc:	00000106 	br	88e4 <close+0x70>
    88e0:	0005883a 	mov	r2,zero
    88e4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    88e8:	e13fff17 	ldw	r4,-4(fp)
    88ec:	0008eb00 	call	8eb0 <alt_release_fd>
    if (rval < 0)
    88f0:	e0bffe17 	ldw	r2,-8(fp)
    88f4:	1000060e 	bge	r2,zero,8910 <close+0x9c>
    {
      ALT_ERRNO = -rval;
    88f8:	00088240 	call	8824 <alt_get_errno>
    88fc:	e0fffe17 	ldw	r3,-8(fp)
    8900:	00c7c83a 	sub	r3,zero,r3
    8904:	10c00015 	stw	r3,0(r2)
      return -1;
    8908:	00bfffc4 	movi	r2,-1
    890c:	00000606 	br	8928 <close+0xb4>
    }
    return 0;
    8910:	0005883a 	mov	r2,zero
    8914:	00000406 	br	8928 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    8918:	00088240 	call	8824 <alt_get_errno>
    891c:	00c01444 	movi	r3,81
    8920:	10c00015 	stw	r3,0(r2)
    return -1;
    8924:	00bfffc4 	movi	r2,-1
  }
}
    8928:	e037883a 	mov	sp,fp
    892c:	dfc00117 	ldw	ra,4(sp)
    8930:	df000017 	ldw	fp,0(sp)
    8934:	dec00204 	addi	sp,sp,8
    8938:	f800283a 	ret

0000893c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    893c:	defffe04 	addi	sp,sp,-8
    8940:	df000115 	stw	fp,4(sp)
    8944:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    8948:	e03fff15 	stw	zero,-4(fp)
    894c:	00000506 	br	8964 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    8950:	e0bfff17 	ldw	r2,-4(fp)
    8954:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    8958:	e0bfff17 	ldw	r2,-4(fp)
    895c:	10800804 	addi	r2,r2,32
    8960:	e0bfff15 	stw	r2,-4(fp)
    8964:	e0bfff17 	ldw	r2,-4(fp)
    8968:	10820030 	cmpltui	r2,r2,2048
    896c:	103ff81e 	bne	r2,zero,8950 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    8970:	e037883a 	mov	sp,fp
    8974:	df000017 	ldw	fp,0(sp)
    8978:	dec00104 	addi	sp,sp,4
    897c:	f800283a 	ret

00008980 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    8980:	defffc04 	addi	sp,sp,-16
    8984:	df000315 	stw	fp,12(sp)
    8988:	df000304 	addi	fp,sp,12
    898c:	e13ffd15 	stw	r4,-12(fp)
    8990:	e17ffe15 	stw	r5,-8(fp)
    8994:	e1bfff15 	stw	r6,-4(fp)
  return len;
    8998:	e0bfff17 	ldw	r2,-4(fp)
}
    899c:	e037883a 	mov	sp,fp
    89a0:	df000017 	ldw	fp,0(sp)
    89a4:	dec00104 	addi	sp,sp,4
    89a8:	f800283a 	ret

000089ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    89ac:	defffe04 	addi	sp,sp,-8
    89b0:	dfc00115 	stw	ra,4(sp)
    89b4:	df000015 	stw	fp,0(sp)
    89b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    89bc:	00800074 	movhi	r2,1
    89c0:	10a55c04 	addi	r2,r2,-27280
    89c4:	10800017 	ldw	r2,0(r2)
    89c8:	10000526 	beq	r2,zero,89e0 <alt_get_errno+0x34>
    89cc:	00800074 	movhi	r2,1
    89d0:	10a55c04 	addi	r2,r2,-27280
    89d4:	10800017 	ldw	r2,0(r2)
    89d8:	103ee83a 	callr	r2
    89dc:	00000206 	br	89e8 <alt_get_errno+0x3c>
    89e0:	00800074 	movhi	r2,1
    89e4:	10a61204 	addi	r2,r2,-26552
}
    89e8:	e037883a 	mov	sp,fp
    89ec:	dfc00117 	ldw	ra,4(sp)
    89f0:	df000017 	ldw	fp,0(sp)
    89f4:	dec00204 	addi	sp,sp,8
    89f8:	f800283a 	ret

000089fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    89fc:	defffa04 	addi	sp,sp,-24
    8a00:	dfc00515 	stw	ra,20(sp)
    8a04:	df000415 	stw	fp,16(sp)
    8a08:	df000404 	addi	fp,sp,16
    8a0c:	e13ffe15 	stw	r4,-8(fp)
    8a10:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    8a14:	e0bffe17 	ldw	r2,-8(fp)
    8a18:	10000326 	beq	r2,zero,8a28 <alt_dev_llist_insert+0x2c>
    8a1c:	e0bffe17 	ldw	r2,-8(fp)
    8a20:	10800217 	ldw	r2,8(r2)
    8a24:	1000051e 	bne	r2,zero,8a3c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    8a28:	00089ac0 	call	89ac <alt_get_errno>
    8a2c:	00c00584 	movi	r3,22
    8a30:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    8a34:	00bffa84 	movi	r2,-22
    8a38:	00001306 	br	8a88 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    8a3c:	e0bffe17 	ldw	r2,-8(fp)
    8a40:	e0ffff17 	ldw	r3,-4(fp)
    8a44:	e0fffc15 	stw	r3,-16(fp)
    8a48:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    8a4c:	e0bffd17 	ldw	r2,-12(fp)
    8a50:	e0fffc17 	ldw	r3,-16(fp)
    8a54:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    8a58:	e0bffc17 	ldw	r2,-16(fp)
    8a5c:	10c00017 	ldw	r3,0(r2)
    8a60:	e0bffd17 	ldw	r2,-12(fp)
    8a64:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    8a68:	e0bffc17 	ldw	r2,-16(fp)
    8a6c:	10800017 	ldw	r2,0(r2)
    8a70:	e0fffd17 	ldw	r3,-12(fp)
    8a74:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    8a78:	e0bffc17 	ldw	r2,-16(fp)
    8a7c:	e0fffd17 	ldw	r3,-12(fp)
    8a80:	10c00015 	stw	r3,0(r2)

  return 0;  
    8a84:	0005883a 	mov	r2,zero
}
    8a88:	e037883a 	mov	sp,fp
    8a8c:	dfc00117 	ldw	ra,4(sp)
    8a90:	df000017 	ldw	fp,0(sp)
    8a94:	dec00204 	addi	sp,sp,8
    8a98:	f800283a 	ret

00008a9c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    8a9c:	defffc04 	addi	sp,sp,-16
    8aa0:	df000315 	stw	fp,12(sp)
    8aa4:	df000304 	addi	fp,sp,12
    8aa8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    8aac:	0001883a 	nop
    8ab0:	e0bfff17 	ldw	r2,-4(fp)
    8ab4:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    8ab8:	e0bffd17 	ldw	r2,-12(fp)
    8abc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    8ac0:	e0bffe17 	ldw	r2,-8(fp)
    8ac4:	10000226 	beq	r2,zero,8ad0 <_exit+0x34>
    ALT_SIM_FAIL();
    8ac8:	002af070 	cmpltui	zero,zero,43969
    8acc:	00000106 	br	8ad4 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    8ad0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    8ad4:	003fff06 	br	8ad4 <_exit+0x38>

00008ad8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8ad8:	defffe04 	addi	sp,sp,-8
    8adc:	dfc00115 	stw	ra,4(sp)
    8ae0:	df000015 	stw	fp,0(sp)
    8ae4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    8ae8:	0009883a 	mov	r4,zero
    8aec:	01440004 	movi	r5,4096
    8af0:	00091880 	call	9188 <alt_icache_flush>
#endif
}
    8af4:	e037883a 	mov	sp,fp
    8af8:	dfc00117 	ldw	ra,4(sp)
    8afc:	df000017 	ldw	fp,0(sp)
    8b00:	dec00204 	addi	sp,sp,8
    8b04:	f800283a 	ret

00008b08 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    8b08:	defff904 	addi	sp,sp,-28
    8b0c:	dfc00615 	stw	ra,24(sp)
    8b10:	df000515 	stw	fp,20(sp)
    8b14:	df000504 	addi	fp,sp,20
    8b18:	e13ffc15 	stw	r4,-16(fp)
    8b1c:	e17ffd15 	stw	r5,-12(fp)
    8b20:	e1bffe15 	stw	r6,-8(fp)
    8b24:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    8b28:	e13ffd17 	ldw	r4,-12(fp)
    8b2c:	e17ffe17 	ldw	r5,-8(fp)
    8b30:	e1bfff17 	ldw	r6,-4(fp)
    8b34:	0008d5c0 	call	8d5c <open>
    8b38:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    8b3c:	e0bffb17 	ldw	r2,-20(fp)
    8b40:	10001c16 	blt	r2,zero,8bb4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    8b44:	00c00074 	movhi	r3,1
    8b48:	18e4f504 	addi	r3,r3,-27692
    8b4c:	e0bffb17 	ldw	r2,-20(fp)
    8b50:	10800324 	muli	r2,r2,12
    8b54:	1885883a 	add	r2,r3,r2
    8b58:	10c00017 	ldw	r3,0(r2)
    8b5c:	e0bffc17 	ldw	r2,-16(fp)
    8b60:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    8b64:	00c00074 	movhi	r3,1
    8b68:	18e4f504 	addi	r3,r3,-27692
    8b6c:	e0bffb17 	ldw	r2,-20(fp)
    8b70:	10800324 	muli	r2,r2,12
    8b74:	1885883a 	add	r2,r3,r2
    8b78:	10800104 	addi	r2,r2,4
    8b7c:	10c00017 	ldw	r3,0(r2)
    8b80:	e0bffc17 	ldw	r2,-16(fp)
    8b84:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    8b88:	00c00074 	movhi	r3,1
    8b8c:	18e4f504 	addi	r3,r3,-27692
    8b90:	e0bffb17 	ldw	r2,-20(fp)
    8b94:	10800324 	muli	r2,r2,12
    8b98:	1885883a 	add	r2,r3,r2
    8b9c:	10800204 	addi	r2,r2,8
    8ba0:	10c00017 	ldw	r3,0(r2)
    8ba4:	e0bffc17 	ldw	r2,-16(fp)
    8ba8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    8bac:	e13ffb17 	ldw	r4,-20(fp)
    8bb0:	0008eb00 	call	8eb0 <alt_release_fd>
  }
} 
    8bb4:	e037883a 	mov	sp,fp
    8bb8:	dfc00117 	ldw	ra,4(sp)
    8bbc:	df000017 	ldw	fp,0(sp)
    8bc0:	dec00204 	addi	sp,sp,8
    8bc4:	f800283a 	ret

00008bc8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    8bc8:	defffb04 	addi	sp,sp,-20
    8bcc:	dfc00415 	stw	ra,16(sp)
    8bd0:	df000315 	stw	fp,12(sp)
    8bd4:	df000304 	addi	fp,sp,12
    8bd8:	e13ffd15 	stw	r4,-12(fp)
    8bdc:	e17ffe15 	stw	r5,-8(fp)
    8be0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    8be4:	01000074 	movhi	r4,1
    8be8:	2124f804 	addi	r4,r4,-27680
    8bec:	e17ffd17 	ldw	r5,-12(fp)
    8bf0:	01800044 	movi	r6,1
    8bf4:	01c07fc4 	movi	r7,511
    8bf8:	0008b080 	call	8b08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    8bfc:	01000074 	movhi	r4,1
    8c00:	2124f504 	addi	r4,r4,-27692
    8c04:	e17ffe17 	ldw	r5,-8(fp)
    8c08:	000d883a 	mov	r6,zero
    8c0c:	01c07fc4 	movi	r7,511
    8c10:	0008b080 	call	8b08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    8c14:	01000074 	movhi	r4,1
    8c18:	2124fb04 	addi	r4,r4,-27668
    8c1c:	e17fff17 	ldw	r5,-4(fp)
    8c20:	01800044 	movi	r6,1
    8c24:	01c07fc4 	movi	r7,511
    8c28:	0008b080 	call	8b08 <alt_open_fd>
}  
    8c2c:	e037883a 	mov	sp,fp
    8c30:	dfc00117 	ldw	ra,4(sp)
    8c34:	df000017 	ldw	fp,0(sp)
    8c38:	dec00204 	addi	sp,sp,8
    8c3c:	f800283a 	ret

00008c40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8c40:	defffe04 	addi	sp,sp,-8
    8c44:	dfc00115 	stw	ra,4(sp)
    8c48:	df000015 	stw	fp,0(sp)
    8c4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8c50:	00800074 	movhi	r2,1
    8c54:	10a55c04 	addi	r2,r2,-27280
    8c58:	10800017 	ldw	r2,0(r2)
    8c5c:	10000526 	beq	r2,zero,8c74 <alt_get_errno+0x34>
    8c60:	00800074 	movhi	r2,1
    8c64:	10a55c04 	addi	r2,r2,-27280
    8c68:	10800017 	ldw	r2,0(r2)
    8c6c:	103ee83a 	callr	r2
    8c70:	00000206 	br	8c7c <alt_get_errno+0x3c>
    8c74:	00800074 	movhi	r2,1
    8c78:	10a61204 	addi	r2,r2,-26552
}
    8c7c:	e037883a 	mov	sp,fp
    8c80:	dfc00117 	ldw	ra,4(sp)
    8c84:	df000017 	ldw	fp,0(sp)
    8c88:	dec00204 	addi	sp,sp,8
    8c8c:	f800283a 	ret

00008c90 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    8c90:	defffd04 	addi	sp,sp,-12
    8c94:	df000215 	stw	fp,8(sp)
    8c98:	df000204 	addi	fp,sp,8
    8c9c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    8ca0:	e0bfff17 	ldw	r2,-4(fp)
    8ca4:	10800217 	ldw	r2,8(r2)
    8ca8:	10d00034 	orhi	r3,r2,16384
    8cac:	e0bfff17 	ldw	r2,-4(fp)
    8cb0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8cb4:	e03ffe15 	stw	zero,-8(fp)
    8cb8:	00001d06 	br	8d30 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    8cbc:	00c00074 	movhi	r3,1
    8cc0:	18e4f504 	addi	r3,r3,-27692
    8cc4:	e0bffe17 	ldw	r2,-8(fp)
    8cc8:	10800324 	muli	r2,r2,12
    8ccc:	1885883a 	add	r2,r3,r2
    8cd0:	10c00017 	ldw	r3,0(r2)
    8cd4:	e0bfff17 	ldw	r2,-4(fp)
    8cd8:	10800017 	ldw	r2,0(r2)
    8cdc:	1880111e 	bne	r3,r2,8d24 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    8ce0:	00c00074 	movhi	r3,1
    8ce4:	18e4f504 	addi	r3,r3,-27692
    8ce8:	e0bffe17 	ldw	r2,-8(fp)
    8cec:	10800324 	muli	r2,r2,12
    8cf0:	1885883a 	add	r2,r3,r2
    8cf4:	10800204 	addi	r2,r2,8
    8cf8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    8cfc:	1000090e 	bge	r2,zero,8d24 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    8d00:	e0bffe17 	ldw	r2,-8(fp)
    8d04:	10c00324 	muli	r3,r2,12
    8d08:	00800074 	movhi	r2,1
    8d0c:	10a4f504 	addi	r2,r2,-27692
    8d10:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    8d14:	e0bfff17 	ldw	r2,-4(fp)
    8d18:	18800226 	beq	r3,r2,8d24 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    8d1c:	00bffcc4 	movi	r2,-13
    8d20:	00000a06 	br	8d4c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8d24:	e0bffe17 	ldw	r2,-8(fp)
    8d28:	10800044 	addi	r2,r2,1
    8d2c:	e0bffe15 	stw	r2,-8(fp)
    8d30:	00800074 	movhi	r2,1
    8d34:	10a55b04 	addi	r2,r2,-27284
    8d38:	10800017 	ldw	r2,0(r2)
    8d3c:	1007883a 	mov	r3,r2
    8d40:	e0bffe17 	ldw	r2,-8(fp)
    8d44:	18bfdd2e 	bgeu	r3,r2,8cbc <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    8d48:	0005883a 	mov	r2,zero
}
    8d4c:	e037883a 	mov	sp,fp
    8d50:	df000017 	ldw	fp,0(sp)
    8d54:	dec00104 	addi	sp,sp,4
    8d58:	f800283a 	ret

00008d5c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    8d5c:	defff604 	addi	sp,sp,-40
    8d60:	dfc00915 	stw	ra,36(sp)
    8d64:	df000815 	stw	fp,32(sp)
    8d68:	df000804 	addi	fp,sp,32
    8d6c:	e13ffd15 	stw	r4,-12(fp)
    8d70:	e17ffe15 	stw	r5,-8(fp)
    8d74:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    8d78:	00bfffc4 	movi	r2,-1
    8d7c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    8d80:	00bffb44 	movi	r2,-19
    8d84:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    8d88:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    8d8c:	e13ffd17 	ldw	r4,-12(fp)
    8d90:	01400074 	movhi	r5,1
    8d94:	29655904 	addi	r5,r5,-27292
    8d98:	0008f300 	call	8f30 <alt_find_dev>
    8d9c:	e0bff815 	stw	r2,-32(fp)
    8da0:	e0bff817 	ldw	r2,-32(fp)
    8da4:	1000051e 	bne	r2,zero,8dbc <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    8da8:	e13ffd17 	ldw	r4,-12(fp)
    8dac:	0008fc00 	call	8fc0 <alt_find_file>
    8db0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    8db4:	00800044 	movi	r2,1
    8db8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    8dbc:	e0bff817 	ldw	r2,-32(fp)
    8dc0:	10002926 	beq	r2,zero,8e68 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    8dc4:	e13ff817 	ldw	r4,-32(fp)
    8dc8:	00090d40 	call	90d4 <alt_get_fd>
    8dcc:	e0bff915 	stw	r2,-28(fp)
    8dd0:	e0bff917 	ldw	r2,-28(fp)
    8dd4:	1000030e 	bge	r2,zero,8de4 <open+0x88>
    {
      status = index;
    8dd8:	e0bff917 	ldw	r2,-28(fp)
    8ddc:	e0bffa15 	stw	r2,-24(fp)
    8de0:	00002306 	br	8e70 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    8de4:	e0bff917 	ldw	r2,-28(fp)
    8de8:	10c00324 	muli	r3,r2,12
    8dec:	00800074 	movhi	r2,1
    8df0:	10a4f504 	addi	r2,r2,-27692
    8df4:	1885883a 	add	r2,r3,r2
    8df8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    8dfc:	e0fffe17 	ldw	r3,-8(fp)
    8e00:	00900034 	movhi	r2,16384
    8e04:	10bfffc4 	addi	r2,r2,-1
    8e08:	1886703a 	and	r3,r3,r2
    8e0c:	e0bffc17 	ldw	r2,-16(fp)
    8e10:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    8e14:	e0bffb17 	ldw	r2,-20(fp)
    8e18:	1000051e 	bne	r2,zero,8e30 <open+0xd4>
    8e1c:	e13ffc17 	ldw	r4,-16(fp)
    8e20:	0008c900 	call	8c90 <alt_file_locked>
    8e24:	e0bffa15 	stw	r2,-24(fp)
    8e28:	e0bffa17 	ldw	r2,-24(fp)
    8e2c:	10001016 	blt	r2,zero,8e70 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    8e30:	e0bff817 	ldw	r2,-32(fp)
    8e34:	10800317 	ldw	r2,12(r2)
    8e38:	10000826 	beq	r2,zero,8e5c <open+0x100>
    8e3c:	e0bff817 	ldw	r2,-32(fp)
    8e40:	10800317 	ldw	r2,12(r2)
    8e44:	e13ffc17 	ldw	r4,-16(fp)
    8e48:	e17ffd17 	ldw	r5,-12(fp)
    8e4c:	e1bffe17 	ldw	r6,-8(fp)
    8e50:	e1ffff17 	ldw	r7,-4(fp)
    8e54:	103ee83a 	callr	r2
    8e58:	00000106 	br	8e60 <open+0x104>
    8e5c:	0005883a 	mov	r2,zero
    8e60:	e0bffa15 	stw	r2,-24(fp)
    8e64:	00000206 	br	8e70 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    8e68:	00bffb44 	movi	r2,-19
    8e6c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    8e70:	e0bffa17 	ldw	r2,-24(fp)
    8e74:	1000080e 	bge	r2,zero,8e98 <open+0x13c>
  {
    alt_release_fd (index);  
    8e78:	e13ff917 	ldw	r4,-28(fp)
    8e7c:	0008eb00 	call	8eb0 <alt_release_fd>
    ALT_ERRNO = -status;
    8e80:	0008c400 	call	8c40 <alt_get_errno>
    8e84:	e0fffa17 	ldw	r3,-24(fp)
    8e88:	00c7c83a 	sub	r3,zero,r3
    8e8c:	10c00015 	stw	r3,0(r2)
    return -1;
    8e90:	00bfffc4 	movi	r2,-1
    8e94:	00000106 	br	8e9c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    8e98:	e0bff917 	ldw	r2,-28(fp)
}
    8e9c:	e037883a 	mov	sp,fp
    8ea0:	dfc00117 	ldw	ra,4(sp)
    8ea4:	df000017 	ldw	fp,0(sp)
    8ea8:	dec00204 	addi	sp,sp,8
    8eac:	f800283a 	ret

00008eb0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    8eb0:	defffe04 	addi	sp,sp,-8
    8eb4:	df000115 	stw	fp,4(sp)
    8eb8:	df000104 	addi	fp,sp,4
    8ebc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    8ec0:	e0bfff17 	ldw	r2,-4(fp)
    8ec4:	108000d0 	cmplti	r2,r2,3
    8ec8:	10000d1e 	bne	r2,zero,8f00 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    8ecc:	00c00074 	movhi	r3,1
    8ed0:	18e4f504 	addi	r3,r3,-27692
    8ed4:	e0bfff17 	ldw	r2,-4(fp)
    8ed8:	10800324 	muli	r2,r2,12
    8edc:	1885883a 	add	r2,r3,r2
    8ee0:	10800204 	addi	r2,r2,8
    8ee4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    8ee8:	00c00074 	movhi	r3,1
    8eec:	18e4f504 	addi	r3,r3,-27692
    8ef0:	e0bfff17 	ldw	r2,-4(fp)
    8ef4:	10800324 	muli	r2,r2,12
    8ef8:	1885883a 	add	r2,r3,r2
    8efc:	10000015 	stw	zero,0(r2)
  }
}
    8f00:	e037883a 	mov	sp,fp
    8f04:	df000017 	ldw	fp,0(sp)
    8f08:	dec00104 	addi	sp,sp,4
    8f0c:	f800283a 	ret

00008f10 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    8f10:	deffff04 	addi	sp,sp,-4
    8f14:	df000015 	stw	fp,0(sp)
    8f18:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    8f1c:	000170fa 	wrctl	ienable,zero
}
    8f20:	e037883a 	mov	sp,fp
    8f24:	df000017 	ldw	fp,0(sp)
    8f28:	dec00104 	addi	sp,sp,4
    8f2c:	f800283a 	ret

00008f30 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    8f30:	defffa04 	addi	sp,sp,-24
    8f34:	dfc00515 	stw	ra,20(sp)
    8f38:	df000415 	stw	fp,16(sp)
    8f3c:	df000404 	addi	fp,sp,16
    8f40:	e13ffe15 	stw	r4,-8(fp)
    8f44:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    8f48:	e0bfff17 	ldw	r2,-4(fp)
    8f4c:	10800017 	ldw	r2,0(r2)
    8f50:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    8f54:	e13ffe17 	ldw	r4,-8(fp)
    8f58:	00081340 	call	8134 <strlen>
    8f5c:	10800044 	addi	r2,r2,1
    8f60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    8f64:	00000d06 	br	8f9c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    8f68:	e0bffc17 	ldw	r2,-16(fp)
    8f6c:	10c00217 	ldw	r3,8(r2)
    8f70:	e0bffd17 	ldw	r2,-12(fp)
    8f74:	1809883a 	mov	r4,r3
    8f78:	e17ffe17 	ldw	r5,-8(fp)
    8f7c:	100d883a 	mov	r6,r2
    8f80:	00092140 	call	9214 <memcmp>
    8f84:	1000021e 	bne	r2,zero,8f90 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    8f88:	e0bffc17 	ldw	r2,-16(fp)
    8f8c:	00000706 	br	8fac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    8f90:	e0bffc17 	ldw	r2,-16(fp)
    8f94:	10800017 	ldw	r2,0(r2)
    8f98:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    8f9c:	e0fffc17 	ldw	r3,-16(fp)
    8fa0:	e0bfff17 	ldw	r2,-4(fp)
    8fa4:	18bff01e 	bne	r3,r2,8f68 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    8fa8:	0005883a 	mov	r2,zero
}
    8fac:	e037883a 	mov	sp,fp
    8fb0:	dfc00117 	ldw	ra,4(sp)
    8fb4:	df000017 	ldw	fp,0(sp)
    8fb8:	dec00204 	addi	sp,sp,8
    8fbc:	f800283a 	ret

00008fc0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    8fc0:	defffb04 	addi	sp,sp,-20
    8fc4:	dfc00415 	stw	ra,16(sp)
    8fc8:	df000315 	stw	fp,12(sp)
    8fcc:	df000304 	addi	fp,sp,12
    8fd0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    8fd4:	00800074 	movhi	r2,1
    8fd8:	10a55704 	addi	r2,r2,-27300
    8fdc:	10800017 	ldw	r2,0(r2)
    8fe0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    8fe4:	00003106 	br	90ac <alt_find_file+0xec>
  {
    len = strlen(next->name);
    8fe8:	e0bffd17 	ldw	r2,-12(fp)
    8fec:	10800217 	ldw	r2,8(r2)
    8ff0:	1009883a 	mov	r4,r2
    8ff4:	00081340 	call	8134 <strlen>
    8ff8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    8ffc:	e0bffd17 	ldw	r2,-12(fp)
    9000:	10c00217 	ldw	r3,8(r2)
    9004:	e0bffe17 	ldw	r2,-8(fp)
    9008:	10bfffc4 	addi	r2,r2,-1
    900c:	1885883a 	add	r2,r3,r2
    9010:	10800003 	ldbu	r2,0(r2)
    9014:	10803fcc 	andi	r2,r2,255
    9018:	1080201c 	xori	r2,r2,128
    901c:	10bfe004 	addi	r2,r2,-128
    9020:	10800bd8 	cmpnei	r2,r2,47
    9024:	1000031e 	bne	r2,zero,9034 <alt_find_file+0x74>
    {
      len -= 1;
    9028:	e0bffe17 	ldw	r2,-8(fp)
    902c:	10bfffc4 	addi	r2,r2,-1
    9030:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9034:	e0bffe17 	ldw	r2,-8(fp)
    9038:	e0ffff17 	ldw	r3,-4(fp)
    903c:	1885883a 	add	r2,r3,r2
    9040:	10800003 	ldbu	r2,0(r2)
    9044:	10803fcc 	andi	r2,r2,255
    9048:	1080201c 	xori	r2,r2,128
    904c:	10bfe004 	addi	r2,r2,-128
    9050:	10800be0 	cmpeqi	r2,r2,47
    9054:	1000081e 	bne	r2,zero,9078 <alt_find_file+0xb8>
    9058:	e0bffe17 	ldw	r2,-8(fp)
    905c:	e0ffff17 	ldw	r3,-4(fp)
    9060:	1885883a 	add	r2,r3,r2
    9064:	10800003 	ldbu	r2,0(r2)
    9068:	10803fcc 	andi	r2,r2,255
    906c:	1080201c 	xori	r2,r2,128
    9070:	10bfe004 	addi	r2,r2,-128
    9074:	10000a1e 	bne	r2,zero,90a0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    9078:	e0bffd17 	ldw	r2,-12(fp)
    907c:	10c00217 	ldw	r3,8(r2)
    9080:	e0bffe17 	ldw	r2,-8(fp)
    9084:	1809883a 	mov	r4,r3
    9088:	e17fff17 	ldw	r5,-4(fp)
    908c:	100d883a 	mov	r6,r2
    9090:	00092140 	call	9214 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9094:	1000021e 	bne	r2,zero,90a0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9098:	e0bffd17 	ldw	r2,-12(fp)
    909c:	00000806 	br	90c0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    90a0:	e0bffd17 	ldw	r2,-12(fp)
    90a4:	10800017 	ldw	r2,0(r2)
    90a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    90ac:	e0fffd17 	ldw	r3,-12(fp)
    90b0:	00800074 	movhi	r2,1
    90b4:	10a55704 	addi	r2,r2,-27300
    90b8:	18bfcb1e 	bne	r3,r2,8fe8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    90bc:	0005883a 	mov	r2,zero
}
    90c0:	e037883a 	mov	sp,fp
    90c4:	dfc00117 	ldw	ra,4(sp)
    90c8:	df000017 	ldw	fp,0(sp)
    90cc:	dec00204 	addi	sp,sp,8
    90d0:	f800283a 	ret

000090d4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    90d4:	defffc04 	addi	sp,sp,-16
    90d8:	df000315 	stw	fp,12(sp)
    90dc:	df000304 	addi	fp,sp,12
    90e0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    90e4:	00bffa04 	movi	r2,-24
    90e8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    90ec:	e03ffd15 	stw	zero,-12(fp)
    90f0:	00001d06 	br	9168 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    90f4:	00c00074 	movhi	r3,1
    90f8:	18e4f504 	addi	r3,r3,-27692
    90fc:	e0bffd17 	ldw	r2,-12(fp)
    9100:	10800324 	muli	r2,r2,12
    9104:	1885883a 	add	r2,r3,r2
    9108:	10800017 	ldw	r2,0(r2)
    910c:	1000131e 	bne	r2,zero,915c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    9110:	00c00074 	movhi	r3,1
    9114:	18e4f504 	addi	r3,r3,-27692
    9118:	e0bffd17 	ldw	r2,-12(fp)
    911c:	10800324 	muli	r2,r2,12
    9120:	1885883a 	add	r2,r3,r2
    9124:	e0ffff17 	ldw	r3,-4(fp)
    9128:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    912c:	00800074 	movhi	r2,1
    9130:	10a55b04 	addi	r2,r2,-27284
    9134:	10c00017 	ldw	r3,0(r2)
    9138:	e0bffd17 	ldw	r2,-12(fp)
    913c:	1880040e 	bge	r3,r2,9150 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    9140:	00800074 	movhi	r2,1
    9144:	10a55b04 	addi	r2,r2,-27284
    9148:	e0fffd17 	ldw	r3,-12(fp)
    914c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    9150:	e0bffd17 	ldw	r2,-12(fp)
    9154:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    9158:	00000606 	br	9174 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    915c:	e0bffd17 	ldw	r2,-12(fp)
    9160:	10800044 	addi	r2,r2,1
    9164:	e0bffd15 	stw	r2,-12(fp)
    9168:	e0bffd17 	ldw	r2,-12(fp)
    916c:	10800810 	cmplti	r2,r2,32
    9170:	103fe01e 	bne	r2,zero,90f4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    9174:	e0bffe17 	ldw	r2,-8(fp)
}
    9178:	e037883a 	mov	sp,fp
    917c:	df000017 	ldw	fp,0(sp)
    9180:	dec00104 	addi	sp,sp,4
    9184:	f800283a 	ret

00009188 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    9188:	defffb04 	addi	sp,sp,-20
    918c:	df000415 	stw	fp,16(sp)
    9190:	df000404 	addi	fp,sp,16
    9194:	e13ffe15 	stw	r4,-8(fp)
    9198:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    919c:	e0bfff17 	ldw	r2,-4(fp)
    91a0:	10840070 	cmpltui	r2,r2,4097
    91a4:	1000021e 	bne	r2,zero,91b0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    91a8:	00840004 	movi	r2,4096
    91ac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    91b0:	e0fffe17 	ldw	r3,-8(fp)
    91b4:	e0bfff17 	ldw	r2,-4(fp)
    91b8:	1885883a 	add	r2,r3,r2
    91bc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    91c0:	e0bffe17 	ldw	r2,-8(fp)
    91c4:	e0bffc15 	stw	r2,-16(fp)
    91c8:	00000506 	br	91e0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    91cc:	e0bffc17 	ldw	r2,-16(fp)
    91d0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    91d4:	e0bffc17 	ldw	r2,-16(fp)
    91d8:	10800804 	addi	r2,r2,32
    91dc:	e0bffc15 	stw	r2,-16(fp)
    91e0:	e0fffc17 	ldw	r3,-16(fp)
    91e4:	e0bffd17 	ldw	r2,-12(fp)
    91e8:	18bff836 	bltu	r3,r2,91cc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    91ec:	e0bffe17 	ldw	r2,-8(fp)
    91f0:	108007cc 	andi	r2,r2,31
    91f4:	10000226 	beq	r2,zero,9200 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    91f8:	e0bffc17 	ldw	r2,-16(fp)
    91fc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    9200:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    9204:	e037883a 	mov	sp,fp
    9208:	df000017 	ldw	fp,0(sp)
    920c:	dec00104 	addi	sp,sp,4
    9210:	f800283a 	ret

00009214 <memcmp>:
    9214:	30000d26 	beq	r6,zero,924c <memcmp+0x38>
    9218:	20c00003 	ldbu	r3,0(r4)
    921c:	28800003 	ldbu	r2,0(r5)
    9220:	18800c1e 	bne	r3,r2,9254 <memcmp+0x40>
    9224:	31bfff84 	addi	r6,r6,-2
    9228:	01ffffc4 	movi	r7,-1
    922c:	00000406 	br	9240 <memcmp+0x2c>
    9230:	20c00003 	ldbu	r3,0(r4)
    9234:	28800003 	ldbu	r2,0(r5)
    9238:	31bfffc4 	addi	r6,r6,-1
    923c:	1880051e 	bne	r3,r2,9254 <memcmp+0x40>
    9240:	21000044 	addi	r4,r4,1
    9244:	29400044 	addi	r5,r5,1
    9248:	31fff91e 	bne	r6,r7,9230 <memcmp+0x1c>
    924c:	0005883a 	mov	r2,zero
    9250:	f800283a 	ret
    9254:	1885c83a 	sub	r2,r3,r2
    9258:	f800283a 	ret
